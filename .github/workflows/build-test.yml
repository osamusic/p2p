name: Build Test

on:
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to build for'
        required: true
        default: 'linux-x86_64'
        type: choice
        options:
        - linux-x86_64
        - linux-aarch64
        - macos-x86_64
        - macos-aarch64
        - windows-x86_64
        - all

env:
  CARGO_TERM_COLOR: always

jobs:
  build-single:
    name: Build ${{ github.event.inputs.platform }}
    runs-on: ${{ matrix.os }}
    if: github.event.inputs.platform != 'all'
    strategy:
      matrix:
        include:
          - platform: linux-x86_64
            target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - platform: linux-aarch64
            target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
          - platform: macos-x86_64
            target: x86_64-apple-darwin
            os: macos-latest
          - platform: macos-aarch64
            target: aarch64-apple-darwin
            os: macos-latest
          - platform: windows-x86_64
            target: x86_64-pc-windows-msvc
            os: windows-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install cross-compilation tools
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
        echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run tests
      if: matrix.target == 'x86_64-unknown-linux-gnu' || matrix.target == 'x86_64-apple-darwin' || matrix.target == 'x86_64-pc-windows-msvc'
      run: cargo test --target ${{ matrix.target }}
    
    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Test binary (Unix)
      if: matrix.os != 'windows-latest'
      run: ./target/${{ matrix.target }}/release/p2p-sync --version
    
    - name: Test binary (Windows)
      if: matrix.os == 'windows-latest'
      run: ./target/${{ matrix.target }}/release/p2p-sync.exe --version
    
    - name: Upload artifact (Unix)
      if: matrix.os != 'windows-latest'
      uses: actions/upload-artifact@v3
      with:
        name: p2p-sync-${{ matrix.platform }}
        path: target/${{ matrix.target }}/release/p2p-sync
        retention-days: 7
    
    - name: Upload artifact (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v3
      with:
        name: p2p-sync-${{ matrix.platform }}
        path: target/${{ matrix.target }}/release/p2p-sync.exe
        retention-days: 7

  build-all:
    name: Build All Platforms
    if: github.event.inputs.platform == 'all'
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-x86_64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-aarch64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: macos-aarch64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: windows-x86_64
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install cross-compilation tools
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
        echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Test binary (Unix)
      if: matrix.os != 'windows-latest'
      run: ./target/${{ matrix.target }}/release/p2p-sync --version
    
    - name: Test binary (Windows)
      if: matrix.os == 'windows-latest'
      run: ./target/${{ matrix.target }}/release/p2p-sync.exe --version
    
    - name: Upload artifact (Unix)
      if: matrix.os != 'windows-latest'
      uses: actions/upload-artifact@v3
      with:
        name: p2p-sync-${{ matrix.name }}
        path: target/${{ matrix.target }}/release/p2p-sync
        retention-days: 7
    
    - name: Upload artifact (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v3
      with:
        name: p2p-sync-${{ matrix.name }}
        path: target/${{ matrix.target }}/release/p2p-sync.exe
        retention-days: 7

  test-docker:
    name: Test Docker Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        tags: p2p-sync:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm p2p-sync:test --version
        echo "Docker image test successful!"